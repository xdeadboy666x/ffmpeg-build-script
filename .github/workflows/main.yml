name: Cross-Compile FFmpeg for x64 Win
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os:
          - win64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.0
        
      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          persist-credentials: false
          path: ffmpeg-source

      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: autoconf autoconf-archive autogen automake autopoint cmake make pkg-config ninja-build build-essential meson ccache clang gcc g++ gperf gettext git libglib2.0-dev wget liblz4-dev valgrind libamd3 libcamd3 libccolamd3 libcholmod5 libcolamd3 libsuitesparseconfig7 libumfpack6 libfftw3-dev libgegl-0.4-0t64 libgoogle-perftools4t64 libbluray-dev libbs2b-dev libcaca-dev libcdio-dev libcdio-paranoia-dev libcdparanoia-dev libchromaprint-dev libdav1d-dev libgl1-mesa-dev libglu1-mesa-dev libgme-dev libgsm1-dev libjack-dev libmodplug-dev libnghttp2-dev libnghttp3-dev libshine-dev libsmbclient-dev libsnappy-dev libspeex-dev libssh-dev libtesseract-dev libtwolame-dev libv4l-dev libvo-amrwbenc-dev libvpl-dev libx11-dev libxi-dev libyuv-dev libzvbi-dev libzstd-dev libjpeg-dev libjbig-dev liblzma-dev libsamplerate-dev libsndfile1-dev libtool libzlib1g-dev zlib1g-dev gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 ragel imagemagick-6.q16 qtbase5-dev libjxl-dev openjdk-21-jdk-headless jo jq ladspa-sdk xz-utils pax yasm cargo-c cvs nasm cppcheck libgegl-0.4-0 libgoogle-perftools4 libacl1-dev libdecor-0-dev libmimalloc-dev libpipewire-0.3-dev libpsl-dev librust-jemalloc-sys-dev librust-malloc-buf-dev libsrt-doc libsvtav1-dev libsvtav1dec-dev libsvtav1enc-dev libtbbmalloc2 libwayland-dev libcamd2 libccolamd2 libcholmod3 libcolamd2 libsuitesparseconfig5 libumfpack5 libamd2 cppcheck libgegl-0.4-0 libgoogle-perftools4 libacl1-dev libdecor-0-dev libmimalloc-dev libpipewire-0.3-dev libpsl-dev librust-jemalloc-sys-dev librust-malloc-buf-dev libsrt-doc libsvtav1-dev libsvtav1dec-dev libsvtav1enc-dev libtbbmalloc2 libwayland-dev libcamd2 libccolamd2 libcholmod3 libcolamd2 libsuitesparseconfig5 libumfpack5 libamd2 openjdk-21-jdk-headless autopoint ccache clang cmake gettext gperf ladspa-sdk libbluray-dev libbs2b-dev libcaca-dev libcdio-dev libcdio-paranoia-dev libcdparanoia-dev libchromaprint-dev libdav1d-dev libgl1-mesa-dev libglu1-mesa-dev libgme-dev libgsm1-dev libjack-dev libmodplug-dev libnghttp2-dev libnghttp3-dev libshine-dev libsmbclient-dev libsnappy-dev libspeex-dev libssh-dev libtesseract-dev libtwolame-dev libv4l-dev libvo-amrwbenc-dev libvpl-dev libxi-dev libyuv-dev libzvbi-dev valgrind
          
      - name: Install pip dependencies
        run: sudo -H pip3 -qq install meson ninja
        
      - name: Get current FFmpeg git date
        id: git-date
        working-directory: ffmpeg-source
        run: echo "git-date=$(git log -1 --format=%ci)" >> $GITHUB_OUTPUT

      - name: Get current date & time before build
        id: date-time-before
        run: |
          echo "date-time=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
          
      - name: Run Build Script
        run: |
          export TERM=xterm
          bash ./build-ffmpeg.sh --enable-gpl-and-non-free --latest
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Get current date & time after build
        id: date-time-after
        run: |
          echo "date-time=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
          echo "date-time-tag=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT
      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: |
            ffmpeg-source/ffmpeg.exe
            ffmpeg-source/ffprobe.exe
            ffmpeg-source/ffplay.exe
          if-no-files-found: error
          retention-days: 1
    outputs:
      date-time-before: "${{ steps.date-time-before.outputs.date-time }}"
      date-time-after: "${{ steps.date-time-after.outputs.date-time }}"
      date-time-after-tag: "${{ steps.date-time-after.outputs.date-time-tag }}"
      git-date: "${{ steps.git-date.outputs.git-date }}"

  archive:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - win64
    steps:
      - name: Download FFmpeg binaries
        uses: actions/download-artifact@v4
        with:
          name: "ffmpeg-${{ matrix.os }}"

      - name: Create LICENSE
        run: |
          echo "This version of ffmpeg has nonfree parts compiled in." > LICENSE
          echo "Therefore it is not legally redistributable." >> LICENSE
      - name: 7-Zip FFmpeg binaries
        run: |
          7z a -mx9 "ffmpeg-${{ needs.build.outputs.git-date }}-${{ matrix.os }}-nonfree.7z" \
          ffmpeg.exe ffprobe.exe ffplay.exe LICENSE
      - name: Upload FFmpeg archive
        uses: actions/upload-artifact@v4
        with:
          name: "ffmpeg-archive-${{ matrix.os }}"
          path: "ffmpeg-${{ needs.build.outputs.git-date }}-${{ matrix.os }}-nonfree.7z"
          retention-days: 1

  release:
    needs:
      - build
      - archive
    if: "! inputs.no_release"
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          pattern: "ffmpeg-archive-*"
          merge-multiple: true

      - name: Release FFmpeg archives
        run: |
          gh release create "${{ needs.build.outputs.date-time-after-tag }}-${{ needs.build.outputs.git-date }}" \
          ffmpeg-${{ needs.build.outputs.git-date }}-win64-nonfree.7z \
          -n "FFmpeg nonfree git-${{ needs.build.outputs.git-date }} built on ${{
          needs.build.outputs.date-time-after }}" \
          -t "${{ needs.build.outputs.date-time-after }}"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_REPO: ${{ github.repository }}
