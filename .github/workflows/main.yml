name: Build Rubber Band and Cross-Compile FFmpeg

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-dependencies:
    name: Build Dependencies and Rubber Band Library
    runs-on: ubuntu-latest

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            meson ninja-build pkg-config build-essential libsamplerate-dev python3-pip python3-dev

      - name: Build Meson (version 1.4.0)
        run: |
          curl -L https://github.com/mesonbuild/meson/archive/refs/tags/1.4.0.tar.gz -o meson-1.4.0.tar.gz
          tar -xf meson-1.4.0.tar.gz
          cd meson-1.4.0
          sudo python3 setup.py build
          sudo python3 setup.py install --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace

      - name: Download and Extract Ninja
        run: |
          curl -L https://github.com/ninja-build/ninja/archive/refs/tags/v1.12.1.tar.gz -o ninja-1.12.1.tar.gz
          tar -xf ninja-1.12.1.tar.gz

      - name: Build Ninja
        run: |
          cd ninja-1.12.1
          cmake -B build -DCMAKE_INSTALL_PREFIX=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace -DCMAKE_BUILD_TYPE=Release -DRE2C= -DBUILD_TESTING=OFF -Wno-dev
          make -j4 -C build

      - name: Install Ninja
        run: |
          sudo make -C ninja-1.12.1/build install

      - name: Verify Ninja Installation
        run: |
          ninja --version
          
      - name: Upload Ninja Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ninja-binaries
          path: /home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace/bin/ninja

      - name: Build Rubber Band
        run: |
          git clone https://github.com/breakfastquay/rubberband.git
          cd rubberband
          meson setup build --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace --buildtype=release
          meson compile -C build
          sudo meson install -C build

      # Additional dependency builds (m4, autoconf, libtool, pkg-config, cmake, ninja, libzstd)
      - name: Build m4
        run: |
          if build "m4" "latest"; then
              download "https://ftp.gnu.org/gnu/m4/m4-latest.tar.xz"
              ./configure --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace --enable-c++ --enable-threads=posix
              make "-j$(nproc)"
              sudo make install
              build_done "m4" "latest"
          fi

      - name: Build autoconf
        run: |
          if build "autoconf" "latest"; then
              download "https://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.xz"
              autoreconf -fi
              ./configure --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace M4="$workspace/bin/m4"
              make "-j$(nproc)"
              sudo make install
              build_done "autoconf" "latest"
          fi

      - name: Build libtool
        run: |
          if build "libtool" "latest"; then
              download "https://ftp.gnu.org/gnu/libtool/libtool-latest.tar.xz"
              ./configure --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace --with-pic M4="$workspace/bin/m4"
              make "-j$(nproc)"
              sudo make install
              build_done "libtool" "latest"
          fi

      - name: Build pkg-config
        run: |
          if build "pkg-config" "latest"; then
              download "https://pkgconfig.freedesktop.org/releases/pkg-config-latest.tar.gz"
              autoconf
              ./configure --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace --enable-silent-rules --with-pc-path="$PKG_CONFIG_PATH" --with-internal-glib
              make "-j$(nproc)"
              sudo make install
              build_done "pkg-config" "latest"
          fi

      - name: Build cmake
        run: |
          sudo apt-get install -y ccache
          git clone https://github.com/Kitware/CMake.git
          cd CMake
          git checkout "v3.24.2"  # replace with the desired version
          ./bootstrap --prefix=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace --parallel=$(nproc) --enable-ccache
          make "-j$(nproc)"
          sudo make install

      - name: Build libzstd
        run: |
          git clone https://github.com/facebook/zstd.git
          cd zstd
          git checkout "v1.5.2"  # replace with the desired version
          make "-j$(nproc)"
          sudo make install

      - name: Upload Rubber Band Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rubberband-library
          path: /home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace

  build-ffmpeg:
    name: Cross-Compile FFMPEG
    needs: build-dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build FFMPEG
        run: |
          export TERM=xterm
          export PKG_CONFIG_PATH=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace/lib/pkgconfig:$PKG_CONFIG_PATH
          export LD_LIBRARY_PATH=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace/lib:$LD_LIBRARY_PATH
          sudo chmod +x build-ffmpeg.sh
          bash build-ffmpeg.sh --build --compiler=gcc --enable-gpl-and-non-free
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload Compiled Binaries
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-binaries-windows-x64
          path: |
            ./bin/ffmpeg.exe
            ./bin/ffprobe.exe
            ./bin/ffplay.exe
