name: Build FFmpeg
on:
  schedule:
    - cron: '7 11 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: Disable checking for newer commit
        type: boolean
      no_release:
        description: Don't create release
        type: boolean
      use_own_fork:
        description: Use own ffmpeg-build-script fork
        type: boolean
  watch:
    types: [started]
concurrency:
  group: ${{ github.workflow }}
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]

    steps:

      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: FFmpeg/FFmpeg
          persist-credentials: false
          path: ffmpeg-source
          
      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: subversion python-is-python3 libfreetype-dev libgnutls-dev libmp3lame-dev libsdl2-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev ragel build-essential libass-dev autoconf automake curl texinfo libpulse-dev llvm g++ ed bison flex cvs yasm cmake git libqrencode-dev make pkg-config zlib1g-dev unzip pax nasm gperf libunistring-dev libaom-dev libdav1d-dev autogen bzip2 autoconf-archive p7zip-full meson clang gettext libpng-dev autotools-dev patch wget xz-utils coreutils libx264-dev libx265-dev libfdk-aac-dev libopus-dev
      
      - name: Install pip dependencies
        run: pip -q install  -r https://raw.githubusercontent.com/xdeadboy666x/ffmpeg-build-script/refs/heads/main/requirements.txt --upgrade --user

      - name: Get current FFmpeg git date
        id: git-date
        working-directory: ffmpeg-source
        run: |
          echo git-date=$(git log -1 --format=%ci) >> $GITHUB_OUTPUT

      - name: Get current date & time before build
        id: date-time-before
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          
      - name: Cache FFmpeg builds
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/
          key: FFmpeg-${{ runner.os }}-${{ env.CACHE_KEY }}-${{ needs.check.outputs.helper-git-sha-short }}
          restore-keys: |
            FFmpeg-${{ runner.os }}-${{ env.CACHE_KEY }}-
            FFmpeg-${{ runner.os }}-

      - name: Compile FFmpeg ${{ needs.check.outputs.git-sha-short }} using ffmpeg-build-script ${{ needs.check.outputs.helper-git-sha-short }}
        run: |
          export TERM=xterm
          bash build-ffmpeg.sh --build --enable-gpl-and-non-free --compiler=gcc --jobs 4

      - name: Install Wine
        run: sudo apt-get install -y wine64

      - name: Verify FFmpeg binary
        run: |
          wine ./ffmpeg-source/ffmpeg.exe -version

      - name: Get current date & time after build
        id: date-time-after
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          echo date-time-tag=$(date +'%Y-%m-%d-%H-%M') >> $GITHUB_OUTPUT
          
      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: |
            ffmpeg-source/ffmpeg.exe
            ffmpeg-source/ffprobe.exe
            ffmpeg-source/ffplay.exe
          if-no-files-found: error
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          
    outputs:
      date-time-before: ${{ steps.date-time-before.outputs.date-time }}
      date-time-after: ${{ steps.date-time-after.outputs.date-time }}
      date-time-after-tag: ${{ steps.date-time-after.outputs.date-time-tag }}
      git-date: ${{ steps.git-date.outputs.git-date }}

  archive:
    permissions:
      id-token: write
      attestations: write
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]

    steps:
      - name: Download FFmpeg binaries
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}

      - name: Create LICENSE
        run: |
          echo "This version of ffmpeg has nonfree parts compiled in." >> LICENSE
          echo "Therefore it is not legally redistributable." >> LICENSE
          
      - name: Generate artifact attestation for FFmpeg binaries
        if: '! inputs.no_release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ff*.exe

      - name: 7-Zip FFmpeg binaries
        run: 7z a -mx9 ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z ff{mpeg,probe,play}.exe LICENSE

      - name: Generate artifact attestation for FFmpeg archive
        if: '! inputs.no_release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z

      - name: Upload FFmpeg archive
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-archive-${{ matrix.os }}
          path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          compression-level: 0
  release:
    needs: [build, archive]
    if: '! inputs.no_release'
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-archive-*
          merge-multiple: true

      - name: Release FFmpeg archives
        run: |
          gh release create "${{ needs.build.outputs.date-time-after-tag }}-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}" \
          ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-win64-nonfree.7z \
          -n "FFmpeg nonfree git-${{ needs.check.outputs.git-sha }} in ${{ needs.build.outputs.git-date }} built on ${{ needs.build.outputs.date-time-after }} started at ${{ needs.build.outputs.date-time-before }}
          Using ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-build-script git-${{ needs.check.outputs.helper-git-sha }}" \
          -t "${{ needs.build.outputs.date-time-after }} ${{ needs.check.outputs.git-sha-short }}"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_REPO }}
          GH_REPO: ${{ github.repository }}
