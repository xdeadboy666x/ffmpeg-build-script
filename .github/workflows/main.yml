name: Build Rubber Band and Cross-Compile FFmpeg

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-dependencies:
    name: Build Dependencies and Rubber Band Library
    runs-on: ubuntu-latest

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            meson ninja-build pkg-config build-essential libsamplerate-dev python3-pip python3-dev

      - name: Build Meson (version 1.4.0)
        run: |
          curl -L https://github.com/mesonbuild/meson/archive/refs/tags/1.4.0.tar.gz -o meson-1.4.0.tar.gz
          tar -xf meson-1.4.0.tar.gz
          cd meson-1.4.0
          sudo python3 setup.py build
          sudo python3 setup.py install --prefix="$workspace"

      - name: Build Ninja
        run: |
          find_git_repo "ninja-build/ninja" "1" "T"
          if build "ninja" "$repo_version"; then
              download "https://github.com/ninja-build/ninja/archive/refs/tags/v$repo_version.tar.gz" "ninja-$repo_version.tar.gz"
              re2c_path="$(command -v re2c)"
              execute cmake -B build -DCMAKE_INSTALL_PREFIX="$workspace" -DCMAKE_BUILD_TYPE=Release -DRE2C="$re2c_path" -DBUILD_TESTING=OFF -Wno-dev
              execute make "-j$threads" -C build
              execute sudo make -C build install
              build_done "ninja" "$repo_version"
          fi

      - name: Build Rubber Band
        run: |
          git clone https://github.com/breakfastquay/rubberband.git
          cd rubberband
          meson setup build --prefix="$workspace" --buildtype=release
          meson compile -C build
          sudo meson install -C build

      # Additional dependency builds (m4, autoconf, libtool, pkg-config, cmake, ninja, libzstd)
      - name: Build m4
        run: |
          source_compiler_flags
          if build "m4" "latest"; then
              download "https://ftp.gnu.org/gnu/m4/m4-latest.tar.xz"
              execute ./configure --prefix="$workspace" --enable-c++ --enable-threads=posix
              execute make "-j$threads"
              execute sudo make install
              build_done "m4" "latest"
          fi

      - name: Build autoconf
        run: |
          if build "autoconf" "latest"; then
              download "https://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.xz"
              execute autoreconf -fi
              execute ./configure --prefix="$workspace" M4="$workspace/bin/m4"
              execute make "-j$threads"
              execute sudo make install
              build_done "autoconf" "latest"
          fi

      - name: Build libtool
        run: |
          determine_libtool_version
          if build "libtool" "$libtool_version"; then
              download "https://ftp.gnu.org/gnu/libtool/libtool-$libtool_version.tar.xz"
              execute ./configure --prefix="$workspace" --with-pic M4="$workspace/bin/m4"
              execute make "-j$threads"
              execute sudo make install
              build_done "libtool" "$libtool_version"
          fi

      - name: Build pkg-config
        run: |
          gnu_repo "https://pkgconfig.freedesktop.org/releases/"
          if build "pkg-config" "$repo_version"; then
              download "https://pkgconfig.freedesktop.org/releases/pkg-config-$repo_version.tar.gz"
              execute autoconf
              execute ./configure --prefix="$workspace" --enable-silent-rules --with-pc-path="$PKG_CONFIG_PATH" --with-internal-glib
              execute make "-j$threads"
              execute sudo make install
              build_done "pkg-config" "$repo_version"
          fi

      - name: Build cmake
        run: |
          find_git_repo "Kitware/CMake" "1" "T"
          if build "cmake" "$repo_version"; then
              download "https://github.com/Kitware/CMake/archive/refs/tags/v$repo_version.tar.gz" "cmake-$repo_version.tar.gz"
              execute ./bootstrap --prefix="$workspace" --parallel="$threads" --enable-ccache
              execute make "-j$threads"
              execute sudo make install
              build_done "cmake" "$repo_version"
          fi

      - name: Build meson
        run: |
          find_git_repo "mesonbuild/meson" "1" "T"
          if build "meson" "$repo_version"; then
              download "https://github.com/mesonbuild/meson/archive/refs/tags/$repo_version.tar.gz" "meson-$repo_version.tar.gz"
              execute sudo python3 setup.py build
              execute sudo python3 setup.py install --prefix="$workspace"
              build_done "meson" "$repo_version"
          fi

      - name: Build libzstd
        run: |
          find_git_repo "facebook/zstd" "1" "T"
          if build "libzstd" "$repo_version"; then
              download "https://github.com/facebook/zstd/archive/refs/tags/v$repo_version.tar.gz" "libzstd-$repo_version.tar.gz"
              cd "build/meson" || exit 1
              execute meson setup build --prefix="$workspace" \
                                        --buildtype=release \
                                        --default-library=both \
                                        --strip \
                                        -Dbin_tests=false
              execute ninja "-j$threads" -C build
              execute sudo ninja -C build install
              build_done "libzstd" "$repo_version"
          fi

      - name: Upload Rubber Band Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rubberband-library
          path: /home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace

  build-ffmpeg:
    name: Cross-Compile FFMPEG
    needs: build-dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build FFMPEG
        run: |
          export TERM=xterm
          export PKG_CONFIG_PATH=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace/lib/pkgconfig:$PKG_CONFIG_PATH
          export LD_LIBRARY_PATH=/home/runner/work/ffmpeg-build-script/ffmpeg-build-script/workspace/lib:$LD_LIBRARY_PATH
          sudo chmod +x build-ffmpeg.sh
          bash build-ffmpeg.sh --build --compiler=gcc --enable-gpl-and-non-free
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload Compiled Binaries
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-binaries-windows-x64
          path: |
            ./bin/ffmpeg.exe
            ./bin/ffprobe.exe
            ./bin/ffplay.exe
