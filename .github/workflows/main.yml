name: Cross-Compile FFmpeg

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]
        
    steps:         
      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ragel cvs yasm pax nasm gperf autogen autoconf-archive
          
      - name: Install pip dependencies
        run: sudo -H pip3 -qq install meson ninja
        
      - name: Get current FFmpeg git date
        id: git-date
        working-directory: ffmpeg-source
        run: echo git-date=$(git log -1 --format=%ci) >> $GITHUB_OUTPUT
        
      - name: Get current date & time before build
        id: date-time-before
        run: echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
        
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          export TERM=xterm
          sudo apt-get update
          xargs sudo apt-get -y install < packages.txt
          sudo apt-get install -y \
            ragel cvs yasm pax nasm gperf autogen autoconf-archive build-essential \
            libsamplerate-dev \
            qtbase5-dev \
            libsndfile1-dev \
            gcc-mingw-w64-x86-64 \
            g++-mingw-w64-x86-64 \
            make \
            meson \
            ninja-build \
            pkg-config \
            gcc \
            g++ \
            zlib1g-dev \
            libtool \
            autoconf \
            automake \
            cmake \
            wget \
            git
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
      - name: Run Build Script
        run: |
          export TERM=xterm
          chmod +x build-ffmpeg.sh
          bash ./build-ffmpeg.sh --enable-gpl-and-non-free --latest
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          
      - name: Get current date & time after build
        id: date-time-after
        run: |
          echo date-time=$(date +'%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          echo date-time-tag=$(date +'%Y-%m-%d-%H-%M') >> $GITHUB_OUTPUT
          
      - name: Upload FFmpeg binaries
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: |
            bin/ffmpeg.exe
            bin/ffprobe.exe
            bin/ffplay.exe
          if-no-files-found: error
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          
    outputs:
      date-time-before: ${{ steps.date-time-before.outputs.date-time }}
      date-time-after: ${{ steps.date-time-after.outputs.date-time }}
      date-time-after-tag: ${{ steps.date-time-after.outputs.date-time-tag }}
      git-date: ${{ steps.git-date.outputs.git-date }}

  archive:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [win64]
        
    steps:
      - name: Download FFmpeg binaries
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          
      - name: Create LICENSE
        run: |
          echo "This version of ffmpeg has nonfree parts compiled in." >> LICENSE
          echo "Therefore it is not legally redistributable." >> LICENSE
          
      - name: 7-Zip FFmpeg binaries
        run: 7z a -mx9 ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z ff{mpeg,probe,play}.exe LICENSE
        
      - name: Upload FFmpeg archive
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-archive-${{ matrix.os }}
          path: ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-${{ matrix.os }}-nonfree.7z
          retention-days: ${{ inputs.no_release && '0' || '1' }}
          compression-level: 0
          
  release:
    needs: [build, archive]
    if: '! inputs.no_release'
    runs-on: ubuntu-latest
    steps:
      - name: Download FFmpeg archives
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-archive-*
          merge-multiple: true
          
      - name: Release FFmpeg archives
        run: |
          gh release create "${{ needs.build.outputs.date-time-after-tag }}-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}" \
          ffmpeg-${{ needs.check.outputs.git-sha-short }}-${{ needs.check.outputs.helper-git-sha-short }}-{win64}-nonfree.7z \
          -n "FFmpeg nonfree git-${{ needs.check.outputs.git-sha }} in ${{ needs.build.outputs.git-date }} built on ${{ needs.build.outputs.date-time-after }} started at ${{ needs.build.outputs.date-time-before }}
          Using ${{ needs.check.outputs.helper-git-owner }}/ffmpeg-windows-build-helpers git-${{ needs.check.outputs.helper-git-sha }}" \
          -t "${{ needs.build.outputs.date-time-after }} ${{ needs.check.outputs.git-sha-short }}"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_REPO: ${{ github.repository }}
